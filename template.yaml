AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Template for an auth service
Parameters:
  EnvironmentType:
    Type: String
    Description: The environment of the service
    Default: prod
    AllowedValues: [prod, test]
    ConstraintDescription: Must specify prod or test.
  Domain:
    Type: String
    Description: >-
      The domain name of the service, 
      used for the api gateway custom domain and outputs to use in other stacks.
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: Must specify domain.
  DomainCertificate:
    Type: String
    Description: The ARN of the domain certificate
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: Must specify certificate to use on domain.
  TableName:
    Type: String
    Description: The name of the dynamodb table
    Default: auth-service
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$' # Only allow alphanumeric characters and dashes, and must start with a letter

  JWTSecretsKey:
    Type: String
    Description: The key of the jwt secret in secret manager
    Default: auth-service
    MinLength: 1
    MaxLength: 255
  LocalStack:
    Type: String
    Description: The localstack endpoint, leave empty for deployment.
    Default: 'false'
    MinLength: 1
    MaxLength: 255
  
Conditions:
  ProductionEnvironment: !Equals [!Ref EnvironmentType, prod]
  TestEnvironment: !Equals [!Ref EnvironmentType, test]
  
Resources:
  JWTSecrets:
    Type: AWS::SecretsManager::Secret
    Condition: ProductionEnvironment
    Properties:
      Description: JWT secrets for the auth service
      Name: !Ref JWTSecretsKey

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Condition: ProductionEnvironment
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: doc_type
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: doc_type
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${AWS::StackName}-lambda"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: [sts:AssumeRole]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: ReadSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [secretsmanager:GetSecretValue]
                Resource: !Ref JWTSecrets
        - PolicyName: AccessDynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt DynamoDBTable.Arn

  Lambda:
    Type: AWS::Lambda::Function
    Condition: ProductionEnvironment
    Properties:
      Description: Auth service lambda function
      FunctionName: !Ref AWS::StackName
      Timeout: 10
      Architectures:
        - !If [ProductionEnvironment, arm64, x86_64]
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          DB_TABLE: !Ref TableName
          JWT_SECRET: !Ref JWTSecretsKey
          REGION: !Ref AWS::Region
          LOCAL_ENDPOINT: !Ref LocalStack
      TracingConfig:
        Mode: Active
    Metadata:
        aws:asset:path: ./src
        aws:asset:property: Code

  LambdaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt Lambda.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    
    Properties:
      Name: !Ref AWS::StackName
      Description: API Gateway for the auth service
      EndpointConfiguration:
        Types: [REGIONAL]

  ApiLoginResource:
    Type: AWS::ApiGateway::Resource
    
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: login

  LoginOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: ApiLoginResource
      HttpMethod: OPTIONS
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  
  LoginPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: ApiLoginResource
      HttpMethod: POST
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseModels:
            application/json: Error

  ApiRefreshResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: refresh

  RefreshOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: ApiRefreshResource
      HttpMethod: OPTIONS
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  
  RefreshGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: ApiRefreshResource
      HttpMethod: GET
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseModels:
            application/json: Error

  ApiStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: status

  StatusOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: ApiStatusResource
      HttpMethod: OPTIONS
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  
  StatusGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: ApiStatusResource
      HttpMethod: GET
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseModels:
            application/json: Error

  ApiAuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: auth
  
  AuthGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: ApiAuthResource
      HttpMethod: GET
      ApiKeyRequired: false
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseModels:
            application/json: Error

  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub "${AWS::StackName}-api-authorizer"
      AuthorizerCredentials: !GetAtt LambdaRole.Arn
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
      Type: TOKEN
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGateway
      AuthType: custom

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - LoginPost
      - LoginOptions
      - RefreshGet
      - RefreshOptions
      - StatusGet
      - StatusOptions
      - AuthGet
    Properties:
      Description: API Deployment for the auth service
      RestApiId: !Ref ApiGateway
      StageName: prod
      StageDescription:
        LoggingLevel: ERROR
        TracingEnabled: true
        MetricsEnabled: true

  ApiDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref DomainCertificate
      DomainName: !Ref Domain
      EndpointConfiguration:
        Types: [REGIONAL]

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGatewayDeployment
    Properties:
      DomainName: !Ref ApiDomain
      RestApiId: !Ref ApiGateway
      Stage: prod

Outputs:
  ApiGatewayInvokeURL:
    Description: Invoke URL for the auth service api gateway
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"

  DistributionURL:
    Description: Amazon RegionalDomainName to set up custom domain
    Value: !Sub "${ApiDomain.RegionalDomainName}"

  ServiceURL:
    Description: The url to access the service
    Value: !Sub "https://${Domain}/"

  AuthorizerUri:
    Description: Authorizer uri for use in api gateways
    Value: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
    Export:
      Name: !Sub "${AWS::StackName}-authorizer-uri"
  AuthorizerRole:
    Description: Authorizer role for use in api gateways
    Value: !GetAtt LambdaRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-authorizer-role"